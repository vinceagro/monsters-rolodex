{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","componentDidMount","fetch","then","response","json","users","setState","e","searchField","target","value","state","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAY,iBAAjB,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHTC,EAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACAD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAyBA,QAAUA,GAAtBA,EAAQC,UCJdM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACvB,uBAAOZ,UAAY,SACjBa,KAAK,SACLF,YAAcA,EACdG,SAAWF,MCyCAG,E,kDAzCf,aAAe,IAAD,8BACZ,gBAWFC,kBAAoB,WAClBC,MAAM,8CACTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEd,SAAUa,QAfzB,EAkBdT,aAAe,SAACW,GAChB,EAAKD,SAAS,CAACE,YAAYD,EAAEE,OAAOC,SAjBlC,EAAKC,MAAQ,CACXnB,SAAU,GACVgB,YAAa,IAJH,E,0CAuBd,WAAU,IAAD,EAC2BI,KAAKD,MAA/BnB,EADD,EACCA,SAAUgB,EADX,EACWA,YACZK,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASR,EAAYO,kBAElD,OACE,sBAAK/B,UAAU,MAAf,UACA,iDACA,cAAC,EAAD,CACAW,YAAa,iBACbC,aAAegB,KAAKhB,eAEpB,cAAC,EAAD,CAAUJ,SAAYqB,W,GApCVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,eAAC,IAAMC,WAAP,eAAmB,cAAC,EAAD,IAAnB,OAAgDC,SAASC,eAAe,SAM1EZ,M","file":"static/js/main.5e51dd19.chunk.js","sourcesContent":["\nimport \"./card.styles.css\"\n\nexport const Card = (props) => (\n    <div className = 'card-container'>  \n    <img alt='Monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n    </div>\n)","import React from 'react';\nimport './card-list.styles.css'\nimport { Card } from '../card/card.component'\n\nexport const CardList = props => (\n    <div className='card-list'>\n   {props.monsters.map(monster => (\n        <Card key = {monster.id} monster= {monster}/>\n\n        ))}\n    </div>\n   )","import React from 'react'\nimport './search-box.styles.css'\n\n  export const SearchBox = ({placeholder, handleChange}) => (\n    <input className = 'search'\n      type='search' \n      placeholder= {placeholder} \n      onChange= {handleChange}/>\n)\n\n","\nimport './App.css';\nimport React, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component'\nimport  {SearchBox} from './components/search-box/search-box.component'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n  \n    \n\n  }\n\n  componentDidMount = () => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n.then(response => response.json())\n.then(users => this.setState({ monsters: users}))\n  }\n\n  handleChange = (e) => {\n  this.setState({searchField:e.target.value})\n  }\n\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n    return (\n      <div className=\"App\">\n      <h1>Monster Roladex</h1>\n      <SearchBox \n      placeholder= 'Search monster' \n      handleChange= {this.handleChange}/>\n\n      <CardList monsters = {filteredMonsters}/>\n      \n      </div>\n    );\n  }\n}\n  export default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode> <App /> </React.StrictMode>, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}